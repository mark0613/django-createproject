version: '3'

name: ${COMPOSE_NAME?COMPOSE_NAME is required}

services:
    api:
        container_name: ${API_CONTAINER_NAME?API_CONTAINER_NAME is required}
        build: .
        environment:
            - API_PORT=${API_PORT?API_PORT is required}
        expose:
            - ${API_PORT?API_PORT is required}
        restart: always
        volumes:
            - .:/app
            - media_volume:/app/media
            - static_volume:/app/static
        {% if db != 'sqlite' %}
        depends_on:
            {{ db }}:
                condition: service_healthy
        {% endif %}

    nginx:
        container_name: ${NGINX_CONTAINER_NAME?NGINX_CONTAINER_NAME is required}
        image: nginx:latest
        environment:
            - PROXY_HOST=${API_CONTAINER_NAME?API_CONTAINER_NAME is required}
            - PROXY_PORT=${API_PORT?API_PORT is required}
        entrypoint: /entrypoint.sh
        ports:
            - ${NGINX_PORT?NGINX_PORT is required}:80
        restart: always
        volumes:
            - ./nginx/default.conf:/etc/nginx/templates/default.conf.template:ro
            - ./nginx/entrypoint.sh:/entrypoint.sh:ro
            - media_volume:/app/media
            - static_volume:/app/static
        depends_on:
            - api

    {% if db == 'postgres' %}
    postgres:
        container_name: ${POSTGRES_CONTAINER_NAME?POSTGRES_CONTAINER_NAME is required}
        image: postgres:16
        environment:
            POSTGRES_USER: ${POSTGRES_USER?POSTGRES_USER is required}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?POSTGRES_PASSWORD is required}
            POSTGRES_DB: ${POSTGRES_DB?POSTGRES_DB is required}
        ports:
            - ${POSTGRES_PORT?POSTGRES_PORT is required}:5432
        restart: always
        volumes:
            - pg_data:/var/lib/postgresql/data/
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 30s
    {% elif db == 'mysql' %}
    mysql:
        container_name: ${MYSQL_CONTAINER_NAME?MYSQL_CONTAINER_NAME is required}
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD?MYSQL_ROOT_PASSWORD is required}
            MYSQL_USER: ${MYSQL_USER?MYSQL_USER is required}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD?MYSQL_PASSWORD is required}
            MYSQL_DATABASE: ${MYSQL_DATABASE?MYSQL_DATABASE is required}
        ports:
            - ${MYSQL_PORT?MYSQL_PORT is required}:3306
        restart: always
        volumes:
            - mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 30s
    {% endif %}

volumes:
    media_volume:
    static_volume:
    {% if db == 'postgres' %}
    pg_data:
    {% elif db == 'mysql' %}
    mysql_data:
    {% endif %}
